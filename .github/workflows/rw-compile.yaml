name: Compile

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      hash:
        required: true
        type: string

jobs:
  compile:
    name: Compile

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: "OpenTTD/OpenTTD"
        ref: ${{ inputs.hash }}

    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: benchmark

    - name: Setup vcpkg caching
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
          core.exportVariable('VCPKG_BINARY_SOURCES', 'clear;x-gha,readwrite')

    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt install \
          autoconf-archive \
          libgoogle-perftools-dev \
          libunwind-dev \
          # EOF

        git clone https://github.com/microsoft/vcpkg ${{ runner.temp }}/vcpkg
        cd ${{ runner.temp }}/vcpkg
        git checkout $(git rev-list --tags --max-count=1)
        ./bootstrap-vcpkg.sh -disableMetrics

    - name: Patch OpenTTD
      shell: bash
      run: |
        # Older versions didn't have vcpkg.json embedded in the repository.
        if [ ! -e "vcpkg.json" ]; then
          cp benchmark/vcpkg.json .
        fi

        # Older versions didn't depend on "data", causing build issues with modern ICU.
        if [ -z "$(grep data cmake/FindICU.cmake)" ]; then
          patch -p1 < benchmark/patches/cmake-icu.patch
        fi

        # Force the TAG to be disabled, to ensure it is always considered a nightly build.
        patch -p1 < benchmark/patches/cmake-version.patch

        # Using threading can cause widely different CPU usage; so disable threading.
        patch -p1 < benchmark/patches/thread-disable.patch

    - name: Build
      shell: bash
      run: |
        mkdir build
        cd build

        echo "::group::CMake"
        CXXFLAGS="-ltcmalloc" cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=${{ runner.temp }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DOPTION_USE_ASSERTS=OFF \
          -DOPTION_PACKAGE_DEPENDENCIES=ON
        echo "::endgroup::"

        echo "::group::Build"
        echo "Running on $(nproc) cores"
        cmake --build . -j $(nproc) --target openttd
        echo "::endgroup::"

    - name: Create bundles
      shell: bash
      run: |
        cd ${GITHUB_WORKSPACE}/build
        echo "::group::Run CPack"
        cpack
        echo "::endgroup::"

        echo "::group::Cleanup"
        # Remove the sha256 files CPack generates; we will do this ourself at
        # the end of this workflow.
        rm -f bundles/*.sha256
        echo "::endgroup::"

    - name: Store bundles
      uses: actions/upload-artifact@v4
      with:
        name: openttd-${{ inputs.name }}
        path: build/bundles
        retention-days: 5
